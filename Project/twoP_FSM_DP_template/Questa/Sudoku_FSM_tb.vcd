$date
	Sun Mar 17 19:28:35 2024
$end
$version
	QuestaSim Version 2023.2
$end
$timescale
	1ns
$end

$scope module Sudoku_FSM_tb $end
$var parameter 32 ! SIZE $end
$var reg 1 " in_clka $end
$var reg 1 # in_clkb $end
$var reg 1 $ in_restart $end
$var reg 1 % in_enter $end
$var reg 1 & in_solved $end
$var reg 2 ' in_difficulty [1:0] $end
$var wire 1 ( out_won $end
$var wire 1 ) out_dp_check $end
$var wire 1 * out_ridx_a $end
$var wire 1 + out_ridx_b $end
$var wire 1 , out_state [3] $end
$var wire 1 - out_state [2] $end
$var wire 1 . out_state [1] $end
$var wire 1 / out_state [0] $end
$var wire 1 0 out_fill_flag [7] $end
$var wire 1 1 out_fill_flag [6] $end
$var wire 1 2 out_fill_flag [5] $end
$var wire 1 3 out_fill_flag [4] $end
$var wire 1 4 out_fill_flag [3] $end
$var wire 1 5 out_fill_flag [2] $end
$var wire 1 6 out_fill_flag [1] $end
$var wire 1 7 out_fill_flag [0] $end
$var wire 1 8 res_instr [0] $end
$var wire 1 9 res_instr [1] $end
$var wire 1 : res_instr [2] $end
$var wire 1 ; res_instr [3] $end
$var wire 1 < res_instr [4] $end
$var wire 1 = res_instr [5] $end
$var wire 1 > res_instr [6] $end
$var wire 1 ? res_instr [7] $end
$var wire 1 @ res_instr [8] $end
$var wire 1 A enter_instr [0] $end
$var wire 1 B enter_instr [1] $end
$var wire 1 C enter_instr [2] $end
$var wire 1 D enter_instr [3] $end
$var wire 1 E enter_instr [4] $end
$var wire 1 F enter_instr [5] $end
$var wire 1 G enter_instr [6] $end
$var wire 1 H enter_instr [7] $end
$var wire 1 I enter_instr [8] $end
$var wire 1 J solved_instr [0] $end
$var wire 1 K solved_instr [1] $end
$var wire 1 L solved_instr [2] $end
$var wire 1 M solved_instr [3] $end
$var wire 1 N solved_instr [4] $end
$var wire 1 O solved_instr [5] $end
$var wire 1 P solved_instr [6] $end
$var wire 1 Q solved_instr [7] $end
$var wire 1 R solved_instr [8] $end
$var wire 1 S difficulty_instr [0] $end
$var wire 1 T difficulty_instr [1] $end
$var wire 1 U difficulty_instr [2] $end
$var wire 1 V difficulty_instr [3] $end
$var wire 1 W difficulty_instr [4] $end
$var wire 1 X difficulty_instr [5] $end
$var wire 1 Y difficulty_instr [6] $end
$var wire 1 Z difficulty_instr [7] $end
$var wire 1 [ difficulty_instr [8] $end
$var wire 1 \ difficulty_instr [9] $end
$var wire 1 ] difficulty_instr [10] $end
$var wire 1 ^ difficulty_instr [11] $end
$var wire 1 _ difficulty_instr [12] $end
$var wire 1 ` difficulty_instr [13] $end
$var wire 1 a difficulty_instr [14] $end
$var wire 1 b difficulty_instr [15] $end
$var wire 1 c difficulty_instr [16] $end
$var wire 1 d difficulty_instr [17] $end
$var integer 32 e i $end

$scope module U1 $end
$var parameter 32 f SIZE $end
$var parameter 4 g REG_INP $end
$var parameter 4 h GUESS $end
$var parameter 4 i CHECK $end
$var parameter 4 j WRONG $end
$var parameter 4 k FIN $end
$var parameter 4 l EMPTY $end
$var parameter 4 m SET_DIFF $end
$var parameter 4 n EASY $end
$var parameter 4 o MEDIUM $end
$var parameter 4 p HARD $end
$var parameter 4 q IDLE $end
$var wire 1 r clka $end
$var wire 1 s clkb $end
$var wire 1 t restart $end
$var wire 1 u enter $end
$var wire 1 v solved $end
$var wire 1 w difficulty $end
$var reg 1 x won $end
$var reg 1 y dp_check $end
$var reg 1 z ridx_a $end
$var reg 1 { ridx_b $end
$var reg 4 | state [3:0] $end
$var reg 8 } fill_flag [7:0] $end
$var wire 1 ~ easy_mode [1] $end
$var wire 1 !! easy_mode [0] $end
$var wire 1 "! medium_mode [1] $end
$var wire 1 #! medium_mode [0] $end
$var wire 1 $! hard_mode [1] $end
$var wire 1 %! hard_mode [0] $end
$var wire 1 &! temp_state [3] $end
$var wire 1 '! temp_state [2] $end
$var wire 1 (! temp_state [1] $end
$var wire 1 )! temp_state [0] $end
$var reg 4 *! next_state [3:0] $end

$scope function fsm_function $end
$var reg 4 +! fsm_function [3:0] $end
$var reg 4 ,! state [3:0] $end
$var reg 1 -! difficulty $end
$var reg 1 .! enter $end
$var reg 1 /! solved $end
$upscope $end

$scope begin FSM_SEQ $end
$upscope $end

$scope begin OUTPUT_LOGIC $end
